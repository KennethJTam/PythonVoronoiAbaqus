from abaqus import *
from abaqusConstants import *
from scipy.spatial import Voronoi
import numpy as np
import random

##=========================================================================
# Generate Domain in a 3x3x3 Grid - Super Cell
##=========================================================================

# # initialize random number generator
# rng = np.random.default_rng(10)

# # create a set of coord points in 3D
# sheet_x = 9
# sheet_y = 7.76
# sheet_z = 2
# seeds = 3
# x = rng.uniform(0,sheet_x,seeds)
# y = rng.uniform(0,sheet_y,seeds)
# z = rng.uniform(0,sheet_z,seeds)

# # save original coords
# x_temp = x     
# y_temp = y
# z_temp = z

# # seeds for supercell generation
# for i in range(3):
#     for j in range(3):
        # for k in range(9):                                                     # for thin domains, triple dimension
#             if (i==0 and j==0 and k==0): # skip original coords
#                 continue
#             x = np.append(x,x_temp+i*sheet_x)
#             y = np.append(y,y_temp+j*sheet_y)
#             z = np.append(z,z_temp+k*sheet_z)

# points = np.vstack((x, y, z))
# points = np.transpose(points)                                                  # total number of point: seeds*3*3*9 

# Run the above code to hard-code points array
points = np.array([[ 8.60401539,  1.15842928,  1.37807296],
                   [ 1.86913629,  3.97936382,  1.68349545],
                   [ 7.45600397,  1.05473613,  0.85101799],
                   [ 8.60401539,  1.15842928,  3.37807296],
                   [ 1.86913629,  3.97936382,  3.68349545],
                   [ 7.45600397,  1.05473613,  2.85101799],
                   [ 8.60401539,  1.15842928,  5.37807296],
                   [ 1.86913629,  3.97936382,  5.68349545],
                   [ 7.45600397,  1.05473613,  4.85101799],
                   [ 8.60401539,  1.15842928,  7.37807296],
                   [ 1.86913629,  3.97936382,  7.68349545],
                   [ 7.45600397,  1.05473613,  6.85101799],
                   [ 8.60401539,  1.15842928,  9.37807296],
                   [ 1.86913629,  3.97936382,  9.68349545],
                   [ 7.45600397,  1.05473613,  8.85101799],
                   [ 8.60401539,  1.15842928, 11.37807296],
                   [ 1.86913629,  3.97936382, 11.68349545],
                   [ 7.45600397,  1.05473613, 10.85101799],
                   [ 8.60401539,  1.15842928, 13.37807296],
                   [ 1.86913629,  3.97936382, 13.68349545],
                   [ 7.45600397,  1.05473613, 12.85101799],
                   [ 8.60401539,  1.15842928, 15.37807296],
                   [ 1.86913629,  3.97936382, 15.68349545],
                   [ 7.45600397,  1.05473613, 14.85101799],
                   [ 8.60401539,  1.15842928, 17.37807296],
                   [ 1.86913629,  3.97936382, 17.68349545],
                   [ 7.45600397,  1.05473613, 16.85101799],
                   [ 8.60401539,  8.91842928,  1.37807296],
                   [ 1.86913629, 11.73936382,  1.68349545],
                   [ 7.45600397,  8.81473613,  0.85101799],
                   [ 8.60401539,  8.91842928,  3.37807296],
                   [ 1.86913629, 11.73936382,  3.68349545],
                   [ 7.45600397,  8.81473613,  2.85101799],
                   [ 8.60401539,  8.91842928,  5.37807296],
                   [ 1.86913629, 11.73936382,  5.68349545],
                   [ 7.45600397,  8.81473613,  4.85101799],
                   [ 8.60401539,  8.91842928,  7.37807296],
                   [ 1.86913629, 11.73936382,  7.68349545],
                   [ 7.45600397,  8.81473613,  6.85101799],
                   [ 8.60401539,  8.91842928,  9.37807296],
                   [ 1.86913629, 11.73936382,  9.68349545],
                   [ 7.45600397,  8.81473613,  8.85101799],
                   [ 8.60401539,  8.91842928, 11.37807296],
                   [ 1.86913629, 11.73936382, 11.68349545],
                   [ 7.45600397,  8.81473613, 10.85101799],
                   [ 8.60401539,  8.91842928, 13.37807296],
                   [ 1.86913629, 11.73936382, 13.68349545],
                   [ 7.45600397,  8.81473613, 12.85101799],
                   [ 8.60401539,  8.91842928, 15.37807296],
                   [ 1.86913629, 11.73936382, 15.68349545],
                   [ 7.45600397,  8.81473613, 14.85101799],
                   [ 8.60401539,  8.91842928, 17.37807296],
                   [ 1.86913629, 11.73936382, 17.68349545],
                   [ 7.45600397,  8.81473613, 16.85101799],
                   [ 8.60401539, 16.67842928,  1.37807296],
                   [ 1.86913629, 19.49936382,  1.68349545],
                   [ 7.45600397, 16.57473613,  0.85101799],
                   [ 8.60401539, 16.67842928,  3.37807296],
                   [ 1.86913629, 19.49936382,  3.68349545],
                   [ 7.45600397, 16.57473613,  2.85101799],
                   [ 8.60401539, 16.67842928,  5.37807296],
                   [ 1.86913629, 19.49936382,  5.68349545],
                   [ 7.45600397, 16.57473613,  4.85101799],
                   [ 8.60401539, 16.67842928,  7.37807296],
                   [ 1.86913629, 19.49936382,  7.68349545],
                   [ 7.45600397, 16.57473613,  6.85101799],
                   [ 8.60401539, 16.67842928,  9.37807296],
                   [ 1.86913629, 19.49936382,  9.68349545],
                   [ 7.45600397, 16.57473613,  8.85101799],
                   [ 8.60401539, 16.67842928, 11.37807296],
                   [ 1.86913629, 19.49936382, 11.68349545],
                   [ 7.45600397, 16.57473613, 10.85101799],
                   [ 8.60401539, 16.67842928, 13.37807296],
                   [ 1.86913629, 19.49936382, 13.68349545],
                   [ 7.45600397, 16.57473613, 12.85101799],
                   [ 8.60401539, 16.67842928, 15.37807296],
                   [ 1.86913629, 19.49936382, 15.68349545],
                   [ 7.45600397, 16.57473613, 14.85101799],
                   [ 8.60401539, 16.67842928, 17.37807296],
                   [ 1.86913629, 19.49936382, 17.68349545],
                   [ 7.45600397, 16.57473613, 16.85101799],
                   [17.60401539,  1.15842928,  1.37807296],
                   [10.86913629,  3.97936382,  1.68349545],
                   [16.45600397,  1.05473613,  0.85101799],
                   [17.60401539,  1.15842928,  3.37807296],
                   [10.86913629,  3.97936382,  3.68349545],
                   [16.45600397,  1.05473613,  2.85101799],
                   [17.60401539,  1.15842928,  5.37807296],
                   [10.86913629,  3.97936382,  5.68349545],
                   [16.45600397,  1.05473613,  4.85101799],
                   [17.60401539,  1.15842928,  7.37807296],
                   [10.86913629,  3.97936382,  7.68349545],
                   [16.45600397,  1.05473613,  6.85101799],
                   [17.60401539,  1.15842928,  9.37807296],
                   [10.86913629,  3.97936382,  9.68349545],
                   [16.45600397,  1.05473613,  8.85101799],
                   [17.60401539,  1.15842928, 11.37807296],
                   [10.86913629,  3.97936382, 11.68349545],
                   [16.45600397,  1.05473613, 10.85101799],
                   [17.60401539,  1.15842928, 13.37807296],
                   [10.86913629,  3.97936382, 13.68349545],
                   [16.45600397,  1.05473613, 12.85101799],
                   [17.60401539,  1.15842928, 15.37807296],
                   [10.86913629,  3.97936382, 15.68349545],
                   [16.45600397,  1.05473613, 14.85101799],
                   [17.60401539,  1.15842928, 17.37807296],
                   [10.86913629,  3.97936382, 17.68349545],
                   [16.45600397,  1.05473613, 16.85101799],
                   [17.60401539,  8.91842928,  1.37807296],
                   [10.86913629, 11.73936382,  1.68349545],
                   [16.45600397,  8.81473613,  0.85101799],
                   [17.60401539,  8.91842928,  3.37807296],
                   [10.86913629, 11.73936382,  3.68349545],
                   [16.45600397,  8.81473613,  2.85101799],
                   [17.60401539,  8.91842928,  5.37807296],
                   [10.86913629, 11.73936382,  5.68349545],
                   [16.45600397,  8.81473613,  4.85101799],
                   [17.60401539,  8.91842928,  7.37807296],
                   [10.86913629, 11.73936382,  7.68349545],
                   [16.45600397,  8.81473613,  6.85101799],
                   [17.60401539,  8.91842928,  9.37807296],
                   [10.86913629, 11.73936382,  9.68349545],
                   [16.45600397,  8.81473613,  8.85101799],
                   [17.60401539,  8.91842928, 11.37807296],
                   [10.86913629, 11.73936382, 11.68349545],
                   [16.45600397,  8.81473613, 10.85101799],
                   [17.60401539,  8.91842928, 13.37807296],
                   [10.86913629, 11.73936382, 13.68349545],
                   [16.45600397,  8.81473613, 12.85101799],
                   [17.60401539,  8.91842928, 15.37807296],
                   [10.86913629, 11.73936382, 15.68349545],
                   [16.45600397,  8.81473613, 14.85101799],
                   [17.60401539,  8.91842928, 17.37807296],
                   [10.86913629, 11.73936382, 17.68349545],
                   [16.45600397,  8.81473613, 16.85101799],
                   [17.60401539, 16.67842928,  1.37807296],
                   [10.86913629, 19.49936382,  1.68349545],
                   [16.45600397, 16.57473613,  0.85101799],
                   [17.60401539, 16.67842928,  3.37807296],
                   [10.86913629, 19.49936382,  3.68349545],
                   [16.45600397, 16.57473613,  2.85101799],
                   [17.60401539, 16.67842928,  5.37807296],
                   [10.86913629, 19.49936382,  5.68349545],
                   [16.45600397, 16.57473613,  4.85101799],
                   [17.60401539, 16.67842928,  7.37807296],
                   [10.86913629, 19.49936382,  7.68349545],
                   [16.45600397, 16.57473613,  6.85101799],
                   [17.60401539, 16.67842928,  9.37807296],
                   [10.86913629, 19.49936382,  9.68349545],
                   [16.45600397, 16.57473613,  8.85101799],
                   [17.60401539, 16.67842928, 11.37807296],
                   [10.86913629, 19.49936382, 11.68349545],
                   [16.45600397, 16.57473613, 10.85101799],
                   [17.60401539, 16.67842928, 13.37807296],
                   [10.86913629, 19.49936382, 13.68349545],
                   [16.45600397, 16.57473613, 12.85101799],
                   [17.60401539, 16.67842928, 15.37807296],
                   [10.86913629, 19.49936382, 15.68349545],
                   [16.45600397, 16.57473613, 14.85101799],
                   [17.60401539, 16.67842928, 17.37807296],
                   [10.86913629, 19.49936382, 17.68349545],
                   [16.45600397, 16.57473613, 16.85101799],
                   [26.60401539,  1.15842928,  1.37807296],
                   [19.86913629,  3.97936382,  1.68349545],
                   [25.45600397,  1.05473613,  0.85101799],
                   [26.60401539,  1.15842928,  3.37807296],
                   [19.86913629,  3.97936382,  3.68349545],
                   [25.45600397,  1.05473613,  2.85101799],
                   [26.60401539,  1.15842928,  5.37807296],
                   [19.86913629,  3.97936382,  5.68349545],
                   [25.45600397,  1.05473613,  4.85101799],
                   [26.60401539,  1.15842928,  7.37807296],
                   [19.86913629,  3.97936382,  7.68349545],
                   [25.45600397,  1.05473613,  6.85101799],
                   [26.60401539,  1.15842928,  9.37807296],
                   [19.86913629,  3.97936382,  9.68349545],
                   [25.45600397,  1.05473613,  8.85101799],
                   [26.60401539,  1.15842928, 11.37807296],
                   [19.86913629,  3.97936382, 11.68349545],
                   [25.45600397,  1.05473613, 10.85101799],
                   [26.60401539,  1.15842928, 13.37807296],
                   [19.86913629,  3.97936382, 13.68349545],
                   [25.45600397,  1.05473613, 12.85101799],
                   [26.60401539,  1.15842928, 15.37807296],
                   [19.86913629,  3.97936382, 15.68349545],
                   [25.45600397,  1.05473613, 14.85101799],
                   [26.60401539,  1.15842928, 17.37807296],
                   [19.86913629,  3.97936382, 17.68349545],
                   [25.45600397,  1.05473613, 16.85101799],
                   [26.60401539,  8.91842928,  1.37807296],
                   [19.86913629, 11.73936382,  1.68349545],
                   [25.45600397,  8.81473613,  0.85101799],
                   [26.60401539,  8.91842928,  3.37807296],
                   [19.86913629, 11.73936382,  3.68349545],
                   [25.45600397,  8.81473613,  2.85101799],
                   [26.60401539,  8.91842928,  5.37807296],
                   [19.86913629, 11.73936382,  5.68349545],
                   [25.45600397,  8.81473613,  4.85101799],
                   [26.60401539,  8.91842928,  7.37807296],
                   [19.86913629, 11.73936382,  7.68349545],
                   [25.45600397,  8.81473613,  6.85101799],
                   [26.60401539,  8.91842928,  9.37807296],
                   [19.86913629, 11.73936382,  9.68349545],
                   [25.45600397,  8.81473613,  8.85101799],
                   [26.60401539,  8.91842928, 11.37807296],
                   [19.86913629, 11.73936382, 11.68349545],
                   [25.45600397,  8.81473613, 10.85101799],
                   [26.60401539,  8.91842928, 13.37807296],
                   [19.86913629, 11.73936382, 13.68349545],
                   [25.45600397,  8.81473613, 12.85101799],
                   [26.60401539,  8.91842928, 15.37807296],
                   [19.86913629, 11.73936382, 15.68349545],
                   [25.45600397,  8.81473613, 14.85101799],
                   [26.60401539,  8.91842928, 17.37807296],
                   [19.86913629, 11.73936382, 17.68349545],
                   [25.45600397,  8.81473613, 16.85101799],
                   [26.60401539, 16.67842928,  1.37807296],
                   [19.86913629, 19.49936382,  1.68349545],
                   [25.45600397, 16.57473613,  0.85101799],
                   [26.60401539, 16.67842928,  3.37807296],
                   [19.86913629, 19.49936382,  3.68349545],
                   [25.45600397, 16.57473613,  2.85101799],
                   [26.60401539, 16.67842928,  5.37807296],
                   [19.86913629, 19.49936382,  5.68349545],
                   [25.45600397, 16.57473613,  4.85101799],
                   [26.60401539, 16.67842928,  7.37807296],
                   [19.86913629, 19.49936382,  7.68349545],
                   [25.45600397, 16.57473613,  6.85101799],
                   [26.60401539, 16.67842928,  9.37807296],
                   [19.86913629, 19.49936382,  9.68349545],
                   [25.45600397, 16.57473613,  8.85101799],
                   [26.60401539, 16.67842928, 11.37807296],
                   [19.86913629, 19.49936382, 11.68349545],
                   [25.45600397, 16.57473613, 10.85101799],
                   [26.60401539, 16.67842928, 13.37807296],
                   [19.86913629, 19.49936382, 13.68349545],
                   [25.45600397, 16.57473613, 12.85101799],
                   [26.60401539, 16.67842928, 15.37807296],
                   [19.86913629, 19.49936382, 15.68349545],
                   [25.45600397, 16.57473613, 14.85101799],
                   [26.60401539, 16.67842928, 17.37807296],
                   [19.86913629, 19.49936382, 17.68349545],
                   [25.45600397, 16.57473613, 16.85101799]])

# Generate Voronoi SuperCell
vor = Voronoi(points)

# Define Voronoi propertiess
vertices = vor.vertices                                                        # vertices are corners of each Voronoi grain
edges = vor.ridge_vertices                                                     # ridge_vertices are edges of each Voronoi grain
size = 50                                                                      # Define large size for elimination of distant points
for edge in edges:
    for number in edge:
        if number !=-1 :
            for coord in vertices[number]:
                if coord >= size*4 or coord <= 0:
                    edges[edges.index(edge)].append(-1)
                    break

face_points = []
for edge in edges:
    edge = np.array(edge)
    temp = []
    if np.all(edge >= 0):
            for i in edge:
                temp.append(tuple(vertices[i]))
            temp.append(vertices[edge[0]])
    if (len(temp)>0):
        face_points.append(temp)                                               # face_points are face co-ordinates of each Voronoi grain


##=========================================================================
# Trim SuperCell to Domain in Abaqus
##=========================================================================

# Generate SuperCell Voronoi in Abaqus
myModel = mdb.models['Model-5']
myPart = myModel.Part(name='SuperCell', dimensionality=THREE_D, type=DEFORMABLE_BODY)

for i in range(len(face_points)):
    wire = myPart.WirePolyLine(mergeType=SEPARATE, meshable=ON, points=(face_points[i]))
    face_edge = myPart.getFeatureEdges(name=wire.name)
    myPart.CoverEdges(edgeList = face_edge, tryAnalytical=True)

faces = myPart.faces[:]
myPart.AddCells(faceList = faces)

# Define Domain
sheet_x = 9
sheet_y = 7.76
sheet_z = 2

myPart2 = myModel.Part(name='Domain', dimensionality=THREE_D, type=DEFORMABLE_BODY)
mySketch2 = myModel.ConstrainedSketch(name="Domain-Sketch",sheetSize = 200)
mySketch2.rectangle(point1=(0,0), point2=(sheet_x,sheet_y))
myPart2.BaseSolidExtrude(sketch=mySketch2, depth=sheet_z)

# Define Negative for Boolean Cuts
myPart3 = myModel.Part(name='Negative', dimensionality=THREE_D, type=DEFORMABLE_BODY)
mySketch3 = myModel.ConstrainedSketch(name="Negative-Sketch", sheetSize=200.0)
mySketch3.rectangle(point1=(0,0), point2=(100,100))
myPart3.BaseSolidExtrude(sketch=mySketch3, depth=100)

# Create instances for Boolen Cuts for Domain Negative
myAssembly = myModel.rootAssembly
myAssembly.Instance(name='Negative-1', part=myModel.parts["Negative"], dependent=ON)
myAssembly.Instance(name='Domain-1', part=myModel.parts["Domain"], dependent=ON)
myAssembly.translate(instanceList=('Domain-1', ), vector=(sheet_x,sheet_y,sheet_z*4))
myAssembly.InstanceFromBooleanCut(name='Negative-cut',instanceToBeCut=myAssembly.instances['Negative-1'],
                                  cuttingInstances=(myAssembly.instances['Domain-1'], ), originalInstances=SUPPRESS)

# Create instances for Boolen Cuts for SuperCell Domain
myAssembly.Instance(name='SuperCell-Negative-1', part=myModel.parts["Negative-cut"], dependent=ON)
myAssembly.Instance(name='SuperCell-1', part=myModel.parts["SuperCell"], dependent=ON)
myAssembly.InstanceFromBooleanCut(name='SuperCell-cut',instanceToBeCut=myAssembly.instances['SuperCell-1'],
                                  cuttingInstances=(myAssembly.instances['SuperCell-Negative-1'], ), originalInstances=SUPPRESS)
